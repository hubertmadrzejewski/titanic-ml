{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e687d78",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import numpy as np\n",
    "import joblib\n",
    "import os\n",
    "\n",
    "Load the model and scaler from the SageMaker default model directory\n",
    "model_path = \"/opt/ml/model/trained_model.tar.gz\"\n",
    "scaler_path = \"/opt/ml/model/scaler.joblib\"\n",
    "\n",
    "model = joblib.load(model_path)\n",
    "scaler = joblib.load(scaler_path)  # Assuming you have a scaler saved\n",
    "\n",
    "def model_fn(model_dir):\n",
    "    \"\"\"Load the model and scaler from the disk.\"\"\"\n",
    "    model = joblib.load(os.path.join(model_dir, 'trained_model.tar.gz'))\n",
    "    scaler = joblib.load(os.path.join(model_dir, 'scaler.joblib'))  # Assuming a scaler is used\n",
    "    return model, scaler\n",
    "\n",
    "def input_fn(request_body, request_content_type):\n",
    "    \"\"\"Parse input JSON payload and convert it into an array for prediction.\"\"\"\n",
    "    if request_content_type == 'application/json':\n",
    "        data = json.loads(request_body)\n",
    "        preprocessed_data = preprocess(data)\n",
    "        return preprocessed_data\n",
    "    else:\n",
    "        raise ValueError(\"Unsupported content type: {}\".format(request_content_type))\n",
    "\n",
    "def preprocess(data):\n",
    "    \"\"\"Apply preprocessing to incoming data for prediction.\"\"\"\n",
    "    # Extract features\n",
    "    age = data['age']\n",
    "    sex = data['sex']\n",
    "    pclass = data['pclass']\n",
    "\n",
    "Encode 'sex' to binary (0 for male and 1 for female)\n",
    "    sex_encoded = 0 if sex == 'male' else 1\n",
    "\n",
    "One-hot encode 'pclass'\n",
    "    pclass_encoded = [0, 0, 0]\n",
    "    pclass_encoded[pclass - 1] = 1  # Convert pclass 1, 2, 3 to index 0, 1, 2\n",
    "\n",
    "Combine all features\n",
    "    features = np.array([age, sex_encoded] + pclass_encoded).reshape(1, -1)\n",
    "\n",
    "Apply scaling\n",
    "    scaled_features = scaler.transform(features)\n",
    "\n",
    "    return scaled_features\n",
    "def predict_fn(input_data, model):\n",
    "    \"\"\"Make a prediction using the input data and the loaded model.\"\"\"\n",
    "    predictions = model.predict(input_data)\n",
    "    return predictions\n",
    "\n",
    "def output_fn(prediction_output, accept):\n",
    "    \"\"\"Format the prediction output to the required format.\"\"\"\n",
    "    return json.dumps({\"prediction\": int(prediction_output[0])})\n",
    "\n",
    "def transform_fn(model, payload, content_type, accept_type):\n",
    "    \"\"\"Run transformations for prediction including input, predict, and output functions.\"\"\"\n",
    "    model, scaler = model_fn(\"/opt/ml/model\")\n",
    "    input_data = input_fn(payload, content_type)\n",
    "    prediction_output = predict_fn(input_data, model)\n",
    "    output_data = output_fn(prediction_output, accept_type)\n",
    "    return output_data"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_python3",
   "language": "python",
   "name": "conda_python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
